/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_SMARTCYCLE_PB_H_INCLUDED
#define PB_SMARTCYCLE_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ServerStatus_State {
    ServerStatus_State_ASLEEP = 0,
    ServerStatus_State_STOPPED = 1,
    ServerStatus_State_BIKING = 2
} ServerStatus_State;

typedef enum _ServerStatus_ButtonState {
    ServerStatus_ButtonState_RELEASED = 0,
    ServerStatus_ButtonState_PRESSED = 1
} ServerStatus_ButtonState;

/* Struct definitions */
typedef struct _ServerStatus {
    float speed;
    float cadence;
    int32_t target_gear;
    int32_t current_gear;
    ServerStatus_State state;
    ServerStatus_ButtonState up_shift_button;
    ServerStatus_ButtonState down_shift_button;
} ServerStatus;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ServerStatus_State_MIN ServerStatus_State_ASLEEP
#define _ServerStatus_State_MAX ServerStatus_State_BIKING
#define _ServerStatus_State_ARRAYSIZE ((ServerStatus_State)(ServerStatus_State_BIKING+1))

#define _ServerStatus_ButtonState_MIN ServerStatus_ButtonState_RELEASED
#define _ServerStatus_ButtonState_MAX ServerStatus_ButtonState_PRESSED
#define _ServerStatus_ButtonState_ARRAYSIZE ((ServerStatus_ButtonState)(ServerStatus_ButtonState_PRESSED+1))

#define ServerStatus_state_ENUMTYPE ServerStatus_State
#define ServerStatus_up_shift_button_ENUMTYPE ServerStatus_ButtonState
#define ServerStatus_down_shift_button_ENUMTYPE ServerStatus_ButtonState


/* Initializer values for message structs */
#define ServerStatus_init_default                {0, 0, 0, 0, _ServerStatus_State_MIN, _ServerStatus_ButtonState_MIN, _ServerStatus_ButtonState_MIN}
#define ServerStatus_init_zero                   {0, 0, 0, 0, _ServerStatus_State_MIN, _ServerStatus_ButtonState_MIN, _ServerStatus_ButtonState_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define ServerStatus_speed_tag                   1
#define ServerStatus_cadence_tag                 2
#define ServerStatus_target_gear_tag             3
#define ServerStatus_current_gear_tag            4
#define ServerStatus_state_tag                   5
#define ServerStatus_up_shift_button_tag         6
#define ServerStatus_down_shift_button_tag       7

/* Struct field encoding specification for nanopb */
#define ServerStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    speed,             1) \
X(a, STATIC,   SINGULAR, FLOAT,    cadence,           2) \
X(a, STATIC,   SINGULAR, INT32,    target_gear,       3) \
X(a, STATIC,   SINGULAR, INT32,    current_gear,      4) \
X(a, STATIC,   SINGULAR, UENUM,    state,             5) \
X(a, STATIC,   SINGULAR, UENUM,    up_shift_button,   6) \
X(a, STATIC,   SINGULAR, UENUM,    down_shift_button,   7)
#define ServerStatus_CALLBACK NULL
#define ServerStatus_DEFAULT NULL

extern const pb_msgdesc_t ServerStatus_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ServerStatus_fields &ServerStatus_msg

/* Maximum encoded size of messages (where known) */
#define SMARTCYCLE_PB_H_MAX_SIZE                 ServerStatus_size
#define ServerStatus_size                        38

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
